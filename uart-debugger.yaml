substitutions:
  id: uart-debugger
  device_name: UART Debugger

esphome:
  name: $id
  friendly_name: $device_name
  includes:
    - components/desk/desk_keypad.h

<<: !include common/board/wemos-d1-mini32.yaml
<<: !include common/common-esp32.yaml

# Logs hex strings by default
uart:
  - id: keypad_uart
    baud_rate: 9600
    tx_pin: 17
    rx_pin: 16

sensor:
  - platform: custom
    lambda: |-
      auto desk_keypad_sensor = new DeskKeypad(id(keypad_uart));
      App.register_component(desk_keypad_sensor);
      return {desk_keypad_sensor};
    sensors:
      id: "desk_command"
      name: $device_name Command
      icon: "mdi:counter"
      on_value:
        then:
          lambda: |-
            ESP_LOGI("desk_command", "Received command: 0x%02X", (uint8_t)id(desk_command).state);
            if(!id(keypad_switch).state)
            {
              ESP_LOGI("desk_command", "executing...");
              if(id(desk_command).state == 1)
              {
                // id(desk).open();
              } else if(id(desk_command).state == 2)
              {
                // id(desk).close();
              } else if(id(desk_command).state == 3)
              {
                // id(switch_preset1).turn_on();
              } else if(id(desk_command).state == 4)
              {
                // id(switch_preset2).turn_on();
              } else if(id(desk_command).state == 5)
              {
                // id(switch_preset3).turn_on();
              }  else if(id(desk_command).state == 6)
              {
                // id(switch_m).turn_on();
              } else if(id(desk_command).state == 7)
              {
                // id(switch_alarm).turn_on();
              } else if(id(desk_command).state == 8)
              {
                // id(desk).stop();
              }
            }

switch:
  - platform: template
    name: $device_name Keypad Lock
    icon: mdi:key
    id: "keypad_switch"
    internal: false
    restore_mode: RESTORE_DEFAULT_OFF
    assumed_state: false
    optimistic: true
